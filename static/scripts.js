document.addEventListener('DOMContentLoaded', () => {
  document.getElementById('sendButton').addEventListener('click', sendFile);
});

// Establish socket connection
var socket = io.connect();
var myClientID;
var p = new SimplePeer({
    initiator: Initiator,
    trickle: false
})
// Chunk size for splitting the file
 const chunkSize = 16 * 1024; //16KB

p.on('close', () => {
    console.log("f")
})

const getParameterByName = name => new URLSearchParams(window.location.search).get(name);
// Attach event listener to the button


// Function to handle file sending
function sendFile() {

    const fileInput = document.getElementById('fileInput');
    const file = fileInput.files[0];
    const fileReader = new FileReader();

    fileReader.onload = () => {
        const fileData = fileReader.result;


        const totalChunks = Math.ceil(fileData.byteLength / chunkSize);

        // Create an object with file name and data
        const fileInfo = {
            name: file.name,
            chunks: totalChunks,
        };
        console.log(fileInfo)
        p.send(JSON.stringify(fileInfo));



        // Split the file into chunks and send them sequentially
        let offset = 0;
        for (let i = 0; i < totalChunks; i++) {
          const chunk = fileData.slice(offset, offset + chunkSize);
//          console.log("Sending chunk: " + i);
//          console.log(p._channel.bufferedAmount)
          p.send(chunk);
          offset += chunkSize;
        }
//        let i = 0;


//        const timer = setInterval(() => {
//
//            if(i >= totalChunks){
//                clearInterval(timer);
//            } else if(p._channel.bufferedAmount > 10000000){
//                console.log("Buffer more than 10 000 000");
//            } else if(p._channel.bufferedAmount <= 10000000){
//                const chunk = fileData.slice(offset, offset + chunkSize);
//                console.log("Sending chunk: " + i);
//                console.log(p._channel.bufferedAmount)
//                p.send(chunk);
//                offset += chunkSize;
//                i++;
//            }
//
//        }, 0)

    };

   fileReader.readAsArrayBuffer(file);
}



p.on('connect', () => {
    console.log('CONNECT')
//Enabling send button
    document.getElementById("sendButton").removeAttribute("disabled");
})



let receivedChunks = [];
let expectedChunkCount = 0;
let filename = '';
p.on('data', (data) => {

    console.log(data);
    try {
        const jsonData = JSON.parse(data);
        if(jsonData.name && jsonData.chunks){
            filename = jsonData.name;
            expectedChunkCount = jsonData.chunks;
        }
    } catch{
        receivedChunks.push(data);

        if (receivedChunks.length === expectedChunkCount) {
            const file = new Blob(receivedChunks);
            const downloadLink = document.getElementById('downloadLink');
            downloadLink.href = URL.createObjectURL(file);
            downloadLink.download = filename;
            receivedChunks = [];
            expectedChunkCount = 0;
        }

    }


});




socket.on('webrtc', function(data) {
    console.log(data);
    const [offer, initiator_id] = data;

    p.signal(JSON.parse(offer))

    p.on('signal', data => {
        console.log('SIGNAL', JSON.stringify(data));

        var signalingData = {
            client_id: myClientID, // The client identifier of this client
            target_client_id: initiator_id, // The client identifier of the target client
            signal_data: JSON.stringify(data) // The signaling data generated by simple-peer
        };

        socket.emit("message", signalingData);
    })
});

socket.on('client_id', function (id) {
    myClientID = id
    //Displaying qr code
    if (!Initiator){
        var qrCodeDiv = document.getElementById('qrcode');
        var qrCode = new QRCode(qrCodeDiv, {
            text: window.location.host + '/connectTo?client_id=' + myClientID,
            width: 128,
            height: 128,
        });
        document.getElementById('link').innerHTML = '<a target=_blank href="' + '/connectTo?client_id=' + myClientID + '">link</a>'

    }
    //Sending offer otherwise
    if (Initiator){
//        p._createOffer()
        p.on('signal', data => {
            console.log('SIGNAL', JSON.stringify(data));

            var signalingData = {
                client_id: myClientID, // The client identifier of this client
                target_client_id: getParameterByName('client_id'), // The client identifier of the target client
                signal_data: JSON.stringify(data) // The signaling data generated by simple-peer
            };
            socket.emit("message", signalingData);
        })
    }

});


